#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.config/emacs/init.el
#+STARTUP: overview

* Package Initialize
** Setup package sources
   #+begin_src emacs-lisp
     (require 'package)
     (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                              ("melpa" . "https://melpa.org/packages/")
                              ("org", "https://orgmode.org/elpa/")))

     (package-initialize)
     (unless package-archive-contents
       (package-refresh-contents))
   #+end_src

** Initialize use-package / use-package 사용
   use-package를 사용하면 package를 편리하게 관리할 수 있다.

   #+begin_src emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-install 'use-package))

     (require 'use-package)
     (setq use-package-always-ensure t)
     (setq use-package-verbose t)
   #+end_src

* General configuration
** Automatic Package Updates / 자동 패키지 업데이트를 지정해라
   오전 9시에 패키지 업데이트를 실행 할지 선택 가능
   #+begin_src emacs-lisp
     (use-package auto-package-update
       :custom
       (auto-package-update-interval 7)
       (auto-package-update-prompt-before-update t)
       (auto-package-update-hide-results t)
       :config
       (auto-package-update-maybe)
       (auto-package-update-at-time "09:00"))
   #+end_src

** Increase runtime performance / 시작시 성능을 향상 시켜라
   #+begin_src emacs-lisp
     ;; 1024 * 1024 * 1024 = 1G
     (setq gc-cons-threshold (eval-when-compile (* 1024 1024 1024 2)))
     (add-hook 'after-init-hook
               (lambda ()
                 (setq gc-cons-threshold (eval-when-compile (* 1024 1024 1024)))))
   #+end_src

** Start Gc whenever losing focus on emacs / emacs에서 다른 화면으로 이동시 GC 실행시켜라
   #+begin_src emacs-lisp
     (add-hook 'focus-out-hook 'garbage-collect)
   #+end_src

** Set user information / user 정보를 설정해라
   #+begin_src emacs-lisp
     (setq user-full-name "dev-kururu")
     (setq user-mail-address "nomemeber@gmail.com")
   #+end_src

** Mute warning that package cl is deprecated / package cl 경고를 꺼라
   #+begin_src emacs-lisp
     (setq byte-compile-warnings '(cl-functions))
   #+end_src

** Set font / font를 설정해라
   #+begin_src emacs-lisp
     (setq default-frame-alist '((font . "MesloLGMDZ Nerd Font 14")))
     (setq-default line-spacing 0)
     (variable-pitch-mode nil)
   #+end_src

** Set UTF-8 / UTF-8을 설정해라
   #+begin_src emacs-lisp
     (setq locale-coding-system 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)
     (prefer-coding-system 'utf-8)

     (setenv "LANG" "en_US.UTF-8")
     (setenv "LC_ALL" "en_US.UTF-8")
     (setenv "LC_CTYPE" "en_US.UTF-8")
   #+end_src

** Set alias yes-or-no-p as y-or-n-p
   #+begin_src emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+end_src

** Set echo-keystrokes delay time / 입력한 keystrokes의 출력 delay를 설정해라
   #+begin_src emacs-lisp
     (setq echo-keystrokes 0.001)
   #+end_src

** Set tab to 2 spaces / tab을 2 spaces로 설정해라
   #+begin_src emacs-lisp
     (setq-default indent-tabs-mode nil)
     (setq-default tab-width 2)
     (setq indent-line-function 'insert-tab)
   #+end_src

** Turn off visible-bell and ring-bell / 비주얼 벨과 링 벨을 꺼라
   #+begin_src emacs-lisp
     (setq visible-bell nil)
     (setq ring-bell-function 'ignore)
   #+end_src

** Set current line highlighting / 커서가 위치한 라인의 하이라이팅을 설정해라
   #+begin_src emacs-lisp
     (use-package hl-line
       :hook
       (after-init . global-hl-line-mode))
   #+end_src

** Set line wrap / line wrap을 설정해라
   #+begin_src emacs-lisp
     (global-visual-line-mode t)
   #+end_src

** Remember cursor position / 커서의 위치를 기억해라
   #+begin_src emacs-lisp
     (use-package saveplace
       :config
       (save-place-mode))
   #+end_src

** Turn off backup / backup을 꺼라
   #+begin_src emacs-lisp
     (setq create-lockfiles nil)
     (setq make-backup-files nil)
   #+end_src

** Set auto read / 파일간의 동기화를 설정해라
   #+begin_src emacs-lisp
     (global-auto-revert-mode t)
   #+end_src

** Set scroll smooth / 스크롤이 부드럽게 이동하도록 설정해라
   #+begin_src emacs-lisp
     (setq redisplay-dont-pause t)
     (setq scroll-margin 8)
     (setq scroll-step 1)
     (setq scroll-conservatively 10000)
     (setq scroll-preserve-screen-position 8)
   #+end_src

** Set undo / undo를 설정해라
   #+begin_src emacs-lisp
     (use-package undo-tree
       :init
       (setq undo-tree-auto-save-history t
             undo-tree-history-directory-alist '(("." . "~/.config/emacs/undo")))
       :config
       (progn
         (global-undo-tree-mode)
         (setq undo-tree-visualizer-timestamps t)
         (setq undo-tree-visualizer-diff t)))
   #+end_src

** Set autosave / 자동 저장을 설정해라
   #+begin_src emacs-lisp
     (use-package super-save
       :config
       (super-save-mode))
   #+end_src

** Set drag-stuff package
   #+begin_src emacs-lisp
     (use-package drag-stuff
       :config
       (drag-stuff-global-mode))
   #+end_src

** Set rg and wgrep package(grep)
   #+begin_src emacs-lisp
     (use-package rg)

     (use-package wgrep)
   #+end_src

** Set flyspell-corret package(spell checker)
   #+begin_src emacs-lisp
     (use-package flyspell-correct
       :after flyspell)
   #+end_src

** Set recentf
   #+begin_src emacs-lisp
     (require 'recentf)
     (recentf-mode)
     (setq recentf-max-menu-items 9999)
     (setq recentf-save-file "~/.config/emacs/recentf")
     (setq recentf-auto-cleanup 'never)
   #+end_src

** Set hydra package
   #+begin_src emacs-lisp
     (use-package hydra
       :defer t)
   #+end_src

** Set sudo-edit package
   #+begin_src emacs-lisp
     (use-package sudo-edit
       :commands sudo-edit-current-file sudo-edit-find-file)
   #+end_src

* OS configuration
** Mac
*** Set home directory
    OSX doesn't automatically recongnize home directory.
    So manually set home directory

    #+begin_src emacs-lisp
      (if window-system (when (equal system-type 'darwin)
                          (setq default-directory "~/"
                                command-line-default-directory "~/")))
    #+end_src

*** Set Meta and Super
    #+begin_src emacs-lisp
      (if window-system (when (equal system-type 'darwin)
                          (setq mac-command-modifier 'meta
                                mac-option-modifier 'super)))
    #+end_src

*** Set default web browser
    #+begin_src emacs-lisp
      (if window-system (when (equal system-type 'darwin)
            (setq browse-url-browser-function 'browse-url-generic
                  browse-url-generic-program "/Applications/Brave Browser.app/Contents/MacOS/Brave Browser")))
    #+end_src

** Linux
*** Set Input Sorce Keymaps
    #+begin_src emacs-lisp
      (when (equal system-type 'gnu/linux)
        (global-set-key (kbd "S-SPC") 'toggle-input-method))
      (setq default-input-method "korean-hangul")
      ;; (setq default-input-method "japanese")
    #+end_src

* UI Configuration
** Remove GUI stuffs / GUI 요소를 삭제해라
   #+begin_src emacs-lisp
     (menu-bar-mode -1)   ; Disable menu bar
     (tool-bar-mode -1)   ; Disable toolbar
     (tooltip-mode -1)    ; Disable tooltips
     (scroll-bar-mode -1) ; Disable visual scrollbar
   #+end_src

** Set fringe / fringe를 설정해라
   Q: What's fringe?
   A: On graphical displays, each Emacs window normally
      has narrow fringes on the left and right edges. The fringes are
      used to display symbols that provide information about the text in
      the window.
   #+begin_src emacs-lisp
     (set-fringe-mode 10)
   #+end_src

** Set 80 column indicator / 80자 기준자를 설정해라
   #+begin_src emacs-lisp
     (setq-default display-fill-column-indicator-column 80)

     (dolist (mode '(text-mode-hook
                     org-mode-hook
                     js2-mode
                     web-mode
                     prog-mode-hook))
       (add-hook mode (lambda () (display-fill-column-indicator-mode))))
   #+end_src

** Set doom-themes package(theme)
   #+begin_src emacs-lisp
     (use-package doom-themes
       :custom
       (doom-themes-enable-bold t)
       (doom-themes-enable-italic t)
       :config
       (setq doom-themes-treemacs-theme "doom-colors")
       (doom-themes-org-config)
       (doom-themes-treemacs-config))

     ;; (load-theme 'doom-dracula t)
     ;; (load-theme 'doom-gruvbox t)
     ;; (load-theme 'doom-molokai t)
     ;; (load-theme 'doom-one t)
     (load-theme 'doom-vibrant t)
   #+end_src

** Set doom-modeline package(status bar)
   #+begin_src emacs-lisp
     (use-package doom-modeline
       :init
       (doom-modeline-mode)
       :custom
       (doom-modeline-icon t)
       :config
       (setq doom-modeline-height 25)
       (setq doom-modeline-workspace-name t)
       (setq display-time-format " %I:%M")
       (setq display-time-default-load-average nil)
       (setq doom-modeline-vcs-max-length 12)
       (setq doom-modeline-env-version t)
       (line-number-mode)
       (column-number-mode)
       (display-battery-mode)
       (display-time-mode)
       (vc-mode))
   #+end_src

** Set all-the-icons package(icons)
   #+begin_src emacs-lisp
     (use-package all-the-icons
       :config
       (setq all-the-icons-scale-factor 1.0))

     (use-package all-the-icons-ivy-rich
       :after ivy
       :init (all-the-icons-ivy-rich-mode))

     (use-package all-the-icons-dired
       :after dired
       :hook (dired-mode . all-the-icons-dired-mode)
       :config
       (setq all-the-icons-dired-monochrome nil))
   #+end_src

** Set dashboard package(start screen)
   #+begin_src emacs-lisp
     (use-package dashboard
       :config
       (dashboard-setup-startup-hook)
       (setq dashboard-center-content t)
       (setq dashboard-set-file-icons t)

       (setq dashboard-startup-banner 'logo)
       (setq dashboard-banner-logo-title "Happy Hacking!")
       (setq dashboard-init-info "Company is a Intellij between Emacs and Vim.")

       (setq dashboard-startup-banner "~/.config/dotfiles/pictures/emacs/pyramid.png")
       (setq dashboard-items '((recents . 10)
                               (projects . 10)
                               (bookmarks . 5)
                               (agenda . 20)))

       (setq dashboard-footer-icon (all-the-icons-fileicon "emacs"
                                                           :height 1.1
                                                           :v-adjust -0.05
                                                           :face 'font-lock-keyword-face))
       (setq dashboard-footer-messages '("Go to Work")))
   #+end_src

** Keymap cheat sheet
   #+begin_src emacs-lisp
     (use-package which-key
       :defer
       :diminish which-key-mode
       :hook
       (after-init . which-key-mode)
       :config
       (setq which-key-idle-delay 0.4)
       (which-key-mode))
   #+end_src

** Selector
   #+begin_src emacs-lisp
     (use-package ivy
       :diminish
       :bind
       (:map ivy-minibuffer-map
             ("M-v" . 'yank))
       :config
       (setq ivy-use-virtual-buffers t)
       (setq enable-recursive-minibuffers t)
       (setq ivy-height 25)
       (setq ivy-extra-directories nil)
       (setq ivy-use-selectable-prompt t)
       (setq ivy-re-builders-alist
             '((t . ivy--regex-plus)))
       (ivy-mode 1))

     (use-package ivy-rich
       :after ivy
       :init
       (ivy-rich-mode 1))

     (use-package find-file-in-project)
   #+end_src

** Search
   #+begin_src emacs-lisp
     (use-package swiper
       :after ivy
       :config
       (setq ivy-use-virtual-buffers t)
       (setq swiper-include-line-number-in-search t))

     (use-package counsel
       :after ivy
       :config
       (setq counsel-grep-base-command
             "rg -i -M 120 --no-heading --line-number --color never %s %s")
       ;; Remove ^
       (setq ivy-initial-inputs-alist nil))

     (use-package avy
       :config
       (setq avy-keys '(?j ?k ?l ?a ?s ?d ?f ?g ?h)))
   #+end_src

** File Manager
   #+begin_src emacs-lisp
     (use-package dired
       :ensure nil
       :hook
       (dired-mode . auto-revert-mode)
       :commands dired dired-jump
       :custom
       (dired-listing-switches "-agho --group-directories-first")
       :config
       (put 'dired-find-alternate-file 'disabled nil)
       (setq dired-dwim-target t)
       (when (string= system-type "darwin")
         (setq insert-directory-program "/usr/local/bin/gls")))

     (use-package dired-single
       :commands dired dired-jump)
   #+end_src

** Todo highlighting
   #+begin_src emacs-lisp
     (use-package hl-todo
       :hook (prog-mode . hl-todo-mode)
       :config
       (setq hl-todo-highlight-punctuation ":"
             hl-todo-keyword-faces
             `(("TODO"       warning bold)
               ("FIXME"      error bold)
               ("HACK"       font-lock-constant-face bold)
               ("REVIEW"     font-lock-keyword-face bold)
               ("NOTE"       success bold)
               ("DEPRECATED" font-lock-doc-face bold))))
   #+end_src

** Indent
   #+begin_src emacs-lisp
     (use-package highlight-indent-guides
       :defer t
       :hook
       (prog-mode  . highlight-indent-guides-mode)
       :custom
       (highlight-indent-guides-responsive t)
       (highlight-indent-guides-method 'character))
   #+end_src

** Show whitespace
   #+begin_src emacs-lisp
     (use-package whitespace
       :hook
       (prog-mode     . whitespace-mode)
       (markdown-mode . whitespace-mode)
       (org-mode      . whitespace-mode)
       :config
       (set-face-attribute 'whitespace-trailing nil
                           :background nil
                           :foreground "DeepPink"
                           :underline t)
       (set-face-attribute 'whitespace-tab nil
                           :background nil
                           :foreground "LightSkyBlue"
                           :underline t)
       (set-face-attribute 'whitespace-space nil
                           :background "GreenYellow"
                           :foreground "GreenYellow")
       (setq whitespace-style '(face
                                trailing
                                tabs
                                empty
                                spaces
                                tab-mark))
       (setq whitespace-space-regexp "\\(\u3000+\\)")
       (setq whitespace-display-mappings
             '((tab-mark ?\t [?\xBB ?\t]))))
   #+end_src

** Git gutter
   #+begin_src emacs-lisp
     (use-package git-gutter
       :config
       (global-git-gutter-mode t)
       (setq git-gutter:update-interval 0.1)
       (setq git-gutter:start-update-timer 0.1))
   #+end_src

** Line number
   #+begin_src emacs-lisp
     (setq display-line-numbers-type 'relative)
     (global-display-line-numbers-mode t)

     (dolist (mode '(prog-mode-hook))
       (add-hook mode (lambda () (display-line-numbers-mode))))
     (dolist (mode '(org-mode-hook))
       (add-hook mode (lambda () (display-line-numbers-mode 0))))
   #+end_src

** Line selector
   #+begin_src emacs-lisp
     (use-package ace-window
       :config
       (setq aw-keys '(?j ?k ?l ?a ?s ?d ?f ?g ?h)))
   #+end_src

** Bookmark
   #+begin_src emacs-lisp
     (use-package bm
       :demand t
       :init
       (setq bm-restore-repository-on-load t)
       :config
       (set-face-background 'bm-persistent-face "OrangeRed")
       (set-face-foreground 'bm-persistent-face "GhostWhite")
       (setq bm-cycle-all-buffers t)
       (setq bm-repository-file "~/.config/emacs/bm-repository")
       (setq-default bm-buffer-persistence t)
       (add-hook 'after-init-hook 'bm-repository-load)
       (add-hook 'kill-emacs-hook #'(lambda nil
                                      (bm-buffer-save-all)
                                      (bm-repository-save)))
       (add-hook 'after-save-hook #'bm-buffer-save)
       (add-hook 'find-file-hooks   #'bm-buffer-restore)
       (add-hook 'after-revert-hook #'bm-buffer-restore))
   #+end_src

** Focus Mode
   #+begin_src emacs-lisp
     (use-package writeroom-mode)

     (defun def/writeroom()
       (interactive)
       (writeroom-mode 1)
       (display-line-numbers-mode 0)
       (git-gutter-mode 0))

     (defun def/writeroom-reset()
       (interactive)
       (writeroom-mode 0)
       (display-line-numbers-mode 1)
       (git-gutter-mode 1))

     (defun def/writeroom-toggle()
       (interactive)
       (let ((toggle
              (if writeroom-mode
                  nil t)))
       (if toggle
           (def/writeroom)
           (def/writeroom-reset))))
   #+end_src

** Workspace
   #+begin_src emacs-lisp
     (use-package perspective
       :config
       (persp-mode)
       (persp-turn-off-modestring))

     (defvar persp-switch-prefix "M-%d")
     (defvar persp-first-perspective "1")
     (defvar persp-top-perspective "0")
     (defvar persp-bottom-perspective "9")

     (add-hook 'persp-state-after-load-hook 'persp-my-setup)
     (add-hook 'after-init-hook 'persp-my-setup)
   #+end_src

** Dictionary
   #+begin_src emacs-lisp
     (use-package define-word
       :commands define-word define-word-at-point)
   #+end_src

** Help
   #+begin_src emacs-lisp
     (use-package helpful
       :commands (helpful-callable helpful-variable helpful-command)
       :custom
       (counsel-describe-function-function #'helpful-callable)
       (counsel-describe-variable-function #'helpful-variable)
       :bind
       ([remap describe-function] . counsel-describe-function)
       ([remap describe-command] . helpful-command)
       ([remap describe-variable] . counsel-describe-variable)
       ([remap describe-key] . helpful-key))
   #+end_src

* Development
** Auto complete
   #+begin_src emacs-lisp
     (use-package company
       :diminish company-mode
       :hook
       (after-init . global-company-mode)
       :bind
       (:map company-active-map
             ("C-n" . company-select-next)
             ("C-p" . company-select-previous)
             ("C-s" . company-filter-candidates)
             ("<tab>" . company-abort))
       (:map company-search-map
             ("C-n" . company-select-next)
             ("C-p" . company-select-previous)
             ("<tab>" . company-abort))
       :custom
       (company-minimum-prefix-length 2)
       (company-idle-delay 0.0)
       :config
       (setq company-show-numbers t)
       (setq completion-ignore-case t)
       (setq company-selection-wrap-around t))

     (use-package company-box
       :hook (company-mode . company-box-mode)
       :init
       (setq company-box-icons-alist 'company-box-icons-all-the-icons)
       (setq company-box-backends-colors nil))

     (use-package yasnippet
       :diminish yas-minor-mode
       :hook (after-init . yas-global-mode)
       :config
       (setq yas-new-snippet-default "\
     # -*- mode: snippet -*-
     # name: $1
     # key: ${2:${1:$(yas--key-from-desc yas-text)}}
     # group: $3
     # contributor: Taeksoo Shin
     # --
     $0`(yas-escape-text yas-selected-text)`")
       (setq yas-indent-line 'fixed)
       (setq yas-snippet-dirs '("~/.local/share/snippets/yassnippets")))
   #+end_src

** Formatting
   #+begin_src emacs-lisp
     (use-package format-all)
   #+end_src

** Git
   #+begin_src emacs-lisp
     (use-package magit
       :commands magit-status
       :init
       (setq vc-handled-backends nil)
       :custom
       (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
   #+end_src

** History completion
   #+begin_src emacs-lisp
     (use-package smex
       :after ivy
       :init (smex-initialize)
       :config
       (setq smex-history-length 100))
   #+end_src

** Project
   #+begin_src emacs-lisp
     (use-package projectile
       :defer t
       :diminish
       :custom ((projectile-completion-system 'ivy))
       :config
       (projectile-mode)
       (setq projectile-enable-caching t)
       :init
       (setq projectile-switch-project-action #'projectile-dired))

     (use-package counsel-projectile
       :after projectile
       :init
       (setq projectile-switch-project-action 'counsel-projectile-find-file)
       :config (counsel-projectile-mode))

     (use-package treemacs
       :commands treemacs treemacs-switch-workspace
       :custom
       (treemacs-project-follow-cleanup t))

     (use-package treemacs-evil
       :after (treemacs evil))

     (use-package treemacs-projectile
       :after (treemacs projectile))
   #+end_src

** Bracket
   #+begin_src emacs-lisp
     (use-package rainbow-delimiters
       :hook (prog-mode . rainbow-delimiters-mode)
       :diminish)

     (use-package smartparens
       :diminish
       :hook
       (prog-mode . smartparens-mode)
       :config
       (require 'smartparens-config)
       (sp-local-pair 'emacs-lisp-mode "'" nil :when '(sp-in-string-p)))

     (use-package paren
       :hook
       (prog-mode . show-paren-mode)
       :custom-face
       (show-paren-match ((nil (:background "#44475a" :foreground "#f1fa8c"))))
       :custom
       (show-paren-style 'mixed)
       (show-paren-when-point-inside-paren t)
       (show-paren-when-point-in-periphery t))
   #+end_src

** CSS Color Support
   #+begin_src emacs-lisp
     (use-package rainbow-mode
       :diminish
       :hook prog-mode org-mode)
   #+end_src

** LSP
   #+begin_src emacs-lisp
     (use-package lsp-mode
       :commands (lsp lsp-deferred)
       :init
       (setq lsp-keymap-prefix "s-l")
       :config
       (lsp-enable-which-key-integration t)
       (setq lsp-ui-doc-enable nil)
       (setq lsp-eldoc-hook nil))

     (use-package lsp-ui
       :hook
       (lsp-mode . lsp-ui-mode)
       :custom
       (lsp-ui-doc-header t)
       (lsp-ui-doc-include-signature nil)
       (lsp-ui-doc-use-childframe t)
       (lsp-ui-doc-position 'top))

     (defun def/toggle-lsp-ui-doc ()
       (interactive)
       (if lsp-ui-doc-mode
           (progn
             (lsp-ui-doc-mode -1)
             (lsp-ui-doc--hide-frame))
         (lsp-ui-doc-mode 1)))

     (use-package lsp-ivy
       :after lsp)

     (use-package lsp-treemacs
       :after lsp
       :config
       (setq lsp-treemacs-symbols-position-params `((side . right) (slot . 2) (window-width . 30))))
   #+end_src

** Languages
*** web
    #+begin_src emacs-lisp
      (use-package web-mode
        :mode (( "\\.html\\'" . web-mode)
               ("\\.vue\\'" . web-mode))
        ;; :hook (web-mode . lsp-deferred)
        :config
        (setq web-mode-attr-indent-offset nil)
        (setq web-mode-markup-indent-offset 2)
        (setq web-mode-css-indent-offset 2)
        (setq web-mode-code-indent-offset 2)
        (setq web-mode-sql-indent-offset 2)
        (setq indent-tabs-mode nil)
        (setq tab-width 2))

      (use-package emmet-mode
        :hook (web-mode . emmet-mode))
    #+end_src

*** javascript
    #+begin_src emacs-lisp
      (use-package js2-mode
        :mode (("\\.js\\'" . js2-mode))
        :hook (js2-mode . lsp-deferred)
        :config
        (setq js-indent-level 2))
    #+end_src

*** typescript
    #+begin_src emacs-lisp
      (use-package typescript-mode
        :mode "\\.ts\\'"
        :hook (typescript-mode . lsp-deferred)
        :config
        (setq typescript-indent-level 2))
    #+end_src

*** java
    #+begin_src emacs-lisp
      (use-package lsp-java
        :hook (java-mode . lsp-deferred))
    #+end_src

*** sql
    #+begin_src emacs-lisp
      (use-package sql-indent
        )
    #+end_src

** Syntax
   #+begin_src emacs-lisp
     (use-package flycheck
       :init (global-flycheck-mode)
       :config
       (setq flycheck-idle-change-delay
             (if flycheck-current-errors 0.1 3.0)))
   #+end_src

** Code structure
   #+begin_src emacs-lisp
     (use-package imenu-list
       :custom-face
       (imenu-list-entry-face-1 ((t (:foreground "white"))))
       :custom
       (imenu-list-focus-after-activation t)
       (imenu-list-auto-resize nil))
   #+end_src

** TODO Debug
   #+begin_src emacs-lisp
     ;; (use-package dap-mode)
   #+end_src

* Org-mode
** Tangle
   #+begin_src emacs-lisp
     (defun efs/org-babel-tangle-config ()
             (when (string-equal (buffer-file-name)
                                 (expand-file-name "~/.config/dotfiles/config/emacs/settings.org"))
               (let ((org-confirm-babel-evaluate nil)) (org-babel-tangle))))

     (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
   #+end_src

** Default
   #+begin_src emacs-lisp
     (defun def/org-mode-setup ()
       (org-indent-mode)
       (setq org-src-fontify-natively t
             org-src-window-setup 'current-window
             org-src-strip-leading-and-trailing-blank-lines t
             ;; org-src-preserve-indentation t
             org-src-tab-acts-natively t)

       ;; agenda
       (setq org-agenda-start-with-log-mode t)
       (setq org-log-done 'time)
       (setq org-log-into-drawer t)
       (setq org-agenda-files '("~/Documents/org/gtd/inbox.org"
                                "~/Documents/org/gtd/gtd.org"
                                "~/Documents/org/gtd/tickler.org"))

       (setq org-refile-targets '(("~/Documents/org/gtd/gtd.org" :maxlevel . 3)
                                  ("~/Documents/org/gtd/someday.org" :level . 1)
                                  ("~/Documents/org/gtd/tickler.org" :maxlevel . 2)))

       (defvar org-filelist nil "alist for files i need to open frequently. Key is a short abbrev string, Value is file path string.")

       (setq org-filelist '(;; gtd
                            ("inbox"   . "~/Documents/org/gtd/inbox.org")
                            ("gtd"     . "~/Documents/org/gtd/gtd.org")
                            ("tickler" . "~/Documents/org/gtd/tickler.org")
                            ("someday" . "~/Documents/org/gtd/someday.org"))))

     (defun efs/jump-org-file ()
       "Prompt to open a file from `org-filelist'.
             URL `http://ergoemacs.org/emacs/emacs_hotkey_open_file_fast.html'
             Version 2015-04-23"
       (interactive)
       (let (($abbrevCode
              (ido-completing-read "Open:" (mapcar (lambda ($x) (car $x)) org-filelist))))
         (find-file (cdr (assoc $abbrevCode org-filelist)))))

     ;; Save Org buffers after refiling!
     (advice-add 'org-refile :after 'org-save-all-org-buffers)

     (defun def/org-font-setup ()
       (font-lock-add-keywords 'org-mode
                               '(("^ *\\([-]\\) "
                                  (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•")))))
                               (dolist (face '((org-level-1 . 1.2)
                                               (org-level-2 . 1.1)
                                               (org-level-3 . 1.05)
                                               (org-level-4 . 1.0)
                                               (org-level-5 . 1.1)
                                               (org-level-6 . 1.1)
                                               (org-level-7 . 1.1)
                                               (org-level-8 . 1.1))))))

     (use-package org
       :config
       (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
       (def/org-font-setup)
       (def/org-mode-setup)
       (setq org-agenda-current-time-string "← now")
       (setq org-agenda-time-grid
             '((daily today require-timed)
               (0530 0600 0630 0700 0730 0800 0830 0900 0930 1000 1030 1100 1130 1200 1230 1300 1330 1400 1430 1500 1530 1600 1630 1700 1730 1800 1830 1900 1930 2000 2030 2100 2130 2200 2230 2300)
               "-"
               "────────────────"))

       ;; Configure custom agenda views
       (setq org-agenda-custom-commands
             '(("d" "Dashboard"
                ((todo "NEXT"
                       ((org-agenda-overriding-header "Next Tasks")))
                 (todo "ACTIVE"
                       ((org-agenda-overriding-header "Active Tasks")))
                 (agenda "" ((org-deadline-warning-days 7)))))

               ("A" "Active Tasks"
                ((todo "ACTIVE"
                       ((org-agenda-overriding-header "Active Tasks")))))

               ("n" "Next Tasks"
                ((todo "NEXT"
                       ((org-agenda-overriding-header "Next Tasks")))))

               ("w" "Work Tasks" tags-todo "+@work")

               ("h" "Home Tasks" tags-todo "+@home")

               ("e" tags-todo "+TODO=\"NEXT\"+Effort<20&+Effort>0"
                ((org-agenda-overriding-header "Low Effort Tasks")
                 (org-agenda-max-todos 20)
                 (org-agenda-files org-agenda-files)))))

       (setq org-capture-templates
             `(("t" "📄 Todo [inbox]" entry (file+headline "~/Documents/org/gtd/inbox.org" "Tasks")
                "* TODO %i%?")

               ("T" "🧠 Tickler" entry (file+olp "~/Documents/org/gtd/tickler.org" "Tickler")
                "* %i%? \n %U ")))

       (setq org-tag-alist '((:startgroup)
                             (:endgroup)
                             ("@home"     . ?h)
                             ("@work"     . ?w)
                             ("@errands"  . ?e)
                             ("@computer" . ?c)
                             ("@phone"    . ?p)
                             ("@mail"     . ?m)

                             ("idea"      . ?I)
                             ("search"    . ?S)
                             ("learn"     . ?L)
                             ("japanese"  . ?J)
                             ("english"   . ?E)
                             ("chinese"   . ?C)))

       (setq org-todo-keywords
             '((sequence "TODO(t)" "NEXT(n)" "ACTIVE(a)" "REVIEW(r)" "WAITING(w)" "PROJECT(p)" "|" "DONE(d)" "CANCELLED(c)"))))

   #+end_src

** Babel
   [[https://orgmode.org/worg/org-contrib/babel/languages/index.html][babel languages support list]]
   #+begin_src emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((js . t)))
   #+end_src

** Bullets
   #+begin_src emacs-lisp
     (use-package org-bullets
       :hook (org-mode . org-bullets-mode)
       ;; :custom
       ;; (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●"))
       )
   #+end_src

** Tempo
   #+begin_src emacs-lisp
     (with-eval-after-load 'org
       (require 'org-tempo)
       (add-to-list 'org-structure-template-alist '("sh"   . "src shell"))
       (add-to-list 'org-structure-template-alist '("el"   . "src emacs-lisp"))
       (add-to-list 'org-structure-template-alist '("java" . "src java"))
       (add-to-list 'org-structure-template-alist '("py"   . "src python"))
       (add-to-list 'org-structure-template-alist '("go"   . "src go"))
       (add-to-list 'org-structure-template-alist '("js"   . "src js"))
       (add-to-list 'org-structure-template-alist '("ts"   . "src typescript"))
       (add-to-list 'org-structure-template-alist '("html" . "src html")))
   #+end_src

* Terminal
** term
   #+begin_src emacs-lisp
     (use-package term
       :commands term
       :config
       (setq explicit-shell-file-name "zsh"))

     (use-package eterm-256color
       :hook (term-mode . eterm-256color-mode))
   #+end_src

** vterm
   #+begin_src emacs-lisp
     (use-package vterm
       :commands vterm
       :config
       (setq vterm-shell "zsh")
       (setq vterm-max-scrollback 100000))
   #+end_src

** multi-vterm
   #+begin_src emacs-lisp
     (use-package multi-vterm)
   #+end_src

* Keymaps
  #+begin_src emacs-lisp
    (use-package general
      :after evil
      :config
      (general-evil-setup t)

      (general-create-definer rune/leader-keys
        :states '(normal insert visual emacs)
        :prefix "SPC"
        :global-prefix "C-SPC")

      (general-create-definer rune/visual-leader-keys
        :states '(visual)
        :prefix "SPC"
        :global-prefix "C-SPC")

      (general-define-key
       "M-r" 'counsel-recentf
       "M-u" 'toggle-transparency
       "M-p" 'find-file-in-project

       "M-a" 'mark-whole-buffer
       "M-s" 'swiper
       "M-f" 'counsel-find-file
       "M-j" 'er/contract-region
       "M-k" 'er/expand-region

       "M-x" 'counsel-M-x
       "M-c" 'kill-ring-save
       "M-v" 'yank
       "M-b" 'quick-calc

       "M-/" 'evilnc-comment-or-uncomment-lines

       "M-<left>" 'drag-stuff-left
       "M-<right>" 'drag-stuff-right
       "M-<down>" 'drag-stuff-down
       "M-<up>" 'drag-stuff-up

       "s-q" 'evil-quit
       "s-w" 'ace-window
       "s-r" 'def/hydra-window-resize/body
       "s-o" 'delete-other-windows
       "s-s" 'evil-window-split
       "s-v" 'evil-window-vsplit
       "s-h" 'evil-window-left
       "s-j" 'evil-window-down
       "s-k" 'evil-window-up
       "s-l" 'evil-window-right
       ;; "s-x" 'custom

       "C-x C-f" 'counsel-find-file

       ;; "<f1>" help
       "<f2>"  '(treemacs :which-key "Treemacs")
       "<f3>" '((lambda () (interactive) (swiper "TODO")) :which-key "Todos")
       "<f4>"  '(yas-visit-snippet-file :which-key "Yasnippet List")
       ;; "<f5>"  '(yas-visit-snippet-file :which-key "Debug") ;; TODO Debug Mode
       "<f6>"  '(magit :which-key "Git")
       "<f7>"  '(lsp-treemacs-errors-list :which-key "Error List")
       "<f8>"  '(db/lsp-treemacs-symbols-toggle :which-key "Structure")
       "<f9>"  '(open-dashboard :which-key "Dashboard")
       "<f10>" '(undo-tree-visualize :which-key "Undotree")
       "<F11>" '(def/writeroom-toggle :Which-Key "Writeroom")
       "<F12>" '(vterm :Which-Key "VTerm"))

      (rune/leader-keys
        "SPC"  '(counsel-M-x :which-key "Command")

        "RET"  '(bm-show-all :which-key "Show Bookmarks")

        "q"  '(:ignore t :which-key "Quick")
        "qd" '(define-word-at-point :which-key "Dictionary")
        "qs" '(def/web-search-google-s :which-key "Web Search")
        "qc" '(quick-calc :which-key "Calc")
        "ql" '(browse-url :which-key "Current Cussor Link")

        "w"  '(:ignore t :which-key "Window")
        "ww" '(ace-window                    :which-key "Ace")
        "wq" '(evil-quit                     :which-key "Quit")
        "wr" '(def/hydra-window-resize/body  :which-key "Resize")
        "wo" '(delete-other-windows          :which-key "Only")
        "ws" '(evil-window-split             :which-key "Split")
        "wv" '(evil-window-vsplit            :which-key "VSplit")
        "wh" '(evil-window-left              :which-key "Left")
        "wj" '(evil-window-down              :which-key "Down")
        "wk" '(evil-window-up                :which-key "Up")
        "wl" '(evil-window-right             :which-key "Right")

        "e"  '(:ignore t :which-key "Error")
        "e[" '(flycheck-error-list-previous-error :which-key "Pervious")
        "e]" '(flycheck-error-list-next-error :which-key "Next")

        "r"  '(:ignore t :which-key "Refactor")
        "rw" '(delete-trailing-whitespace :which-key "Whitespace")
        "rn" '(lsp-rename :which-key "Rename(lsp)")

        "t"  '(:ignore t :which-key "Toggle")
        "tc" '(display-fill-column-indicator-mode :which-key "80 Column Indicator")
        "td" '(def/toggle-lsp-ui-doc :which-key "Doc(lsp)")
        "tf" '(toggle-frame-fullscreen :which-key "Fullscreen")
        "th" '(evil-ex-nohighlight :which-key "Highlight")
        "ti" '(highlight-indent-guides-mode :which-key "Indent guides")
        "tn" '(display-line-numbers-mode :which-key "Linum")
        "tr" '(read-only-mode :which-key "Ready Only")
        "ts" '(def/toggle-spell-check :which-key "Spell check")
        "tw" '(visual-line-mode :which-key "Line wrap")
        ;; "tt" '(visual-line-mode :which-key "Toggle")

        "y"  '(:ignore t :which-key "Ysnippet")
        "yi" '(yas-insert-snippet :which-key "Insert")
        "yl" '(yas-visit-snippet-file :which-key "List")
        "yr" '(yas-reload-all :which-key "Reload")
        "yn" '(def/yas-new-vertical-snippet :which-key "New")

        "u"  '(:ignore t :which-key "???")

        "i"   '(:ignore t :which-key "Insert")
        "ic"  '(counsel-yank-pop :which-key "Clipboard")
        "it"  '(:ignore t :which-key "Time")
        "itn" '(insert-now :which-key "Now")
        "itt" '(insert-today :which-key "Today")
        "itm" '(insert-tomorrow :which-key "toMorrow")
        "itw" '(insert-aweek-later :which-key "a Week later")
        "if"  '(:ignore t :which-key "File")
        "ifn" '(def/insert-file-name :which-key "Name")
        "ifs" '(def/insert-file-size :which-key "Size")
        "ip"  '(:ignore t :which-key "Path")
        "ipa" '(def/insert-absolute-file-path :which-key "Absoulute Path")
        "ipr" '(def/insert-relative-file-path :which-key "Relative Path")
        "iy"  '(yas-insert-snippet :which-key "Ysnippet")

        "o"  '(:ignore t :which-key "Org")
        "oa" '(org-agenda           :which-key "Agenda")
        "oc" '(org-capture          :which-key "Caputure")
        "od" '(org-deadline         :which-key "Deadline")
        "oe" '(org-set-effort       :which-key "Effort")
        "og" '(org-set-tags-command :which-key "Tags")
        "oj" '(efs/jump-org-file t  :which-key "Jump")
        "ol" '(org-insert-link      :which-key "Link")
        "op" '(org-set-property     :which-key "Property")
        "or" '(org-refile           :which-key "Refile")
        "os" '(org-schedule         :which-key "Schedule")
        "ot" '(org-todo             :which-key "Todos")

        "p"  '(:ignore t :which-key "Project")
        "pp" '(find-file-in-project              :which-key "Files")
        "pa" '(projectile-add-known-project      :which-key "Add")
        "pf" '(find-file-in-project              :which-key "Files")
        "pg" '(counsel-projectile-rg             :which-key "Grep")
        "pj" '(counsel-projectile-switch-project :which-key "Jump")
        "pk" '(projectile-remove-known-project   :which-key "Kill")
        "pr" '(projectile-recentf                :which-key "Recent Files")
        "ps" '(counsel-projectile-switch-project :which-key "Switch")
        "p." '(projectile-dired                  :which-key "Dired")

        "pt"  '(:ignore t :which-key "Treemacs")
        "pta" '(treemacs-projectile :which-key "Add")
        "pte" '(treemacs-edit-workspaces :which-key "Edit")
        "ptd" '(treemacs-remove-workspace :which-key "Delete")
        "ptn" '(treemacs-rename :which-key "Rename")

        "[" '(previous-buffer :which-key "Previous")

        "]" '(next-buffer :which-key "Next")

        "a" '(mark-whole-buffer :which-key "All")
        ;; "a"  '(:ignore t :which-key "All")
        ;; "aa" '(mark-whole-buffer :which-key "All")
        ;; "ac" '(no-member/comment-all-line :which-key "Comment")
        ;; "ad" '(no-member/evil-delete-all :which-key "Delete")
        ;; "al" '(format-all-buffer :which-key "Lint")
        ;; "ay" '(no-member/copy-all-line :which-key "Yank")
        ;; "a=" '(no-member/indent-all :which-key "Indent")
        ;; "a<" '(no-member/evil-shift-left-all :which-key "Indent <")
        ;; "a>" '(no-member/evil-shift-right-all :which-key "Indent >")

        "s"  '(:ignore t :which-key "Seach")
        "ss" '(swiper :which-key "Swiper")
        "sa" '(swiper-all :which-key "All Buffers")
        "sb" '(swiper-multi :which-key "Buffer")
        ;; TODO make function
        "sl" '((lambda () (interactive) (swiper "www")) :which-key "Link")
        "st" '((lambda () (interactive) (swiper "TODO")) :which-key "Todos")

        ;; TODO dap mode
        "d"  '(:ignore t :which-key "Debug")

        "f"  '(:ignore t :which-key "File")
        "ff" '(counsel-find-file :which-key "Find")
        "fr" '(counsel-recentf :which-key "Recent")
        "fm" '(def/move-file :which-key "Move")
        "fg" '(counsel-rg :which-key "Grep")
        "fo" '(finder-current-dir-open :which-key "Open")
        "fs" '(save-buffer :which-key "Save")
        "fS" '(projectile-save-project-buffers :which-key "Save all project's files")
        "fu" '(sudo-edit-current-file :which-key "sUdo current file")
        "fU" '(sudo-edit-find-file :which-key "sUdo other")
        ;; TODO make function
        "f," '((lambda () (interactive) (find-file (expand-file-name "~/.config/dotfiles/config/emacs/settings.org"))) :which-key "Emacs config")

        "g"  '(:ignore t                 :which-key "Git")
        "gg" '(magit                     :which-key "Magit")
        "gb" '(magit-branch              :which-key "Branch")
        "gc" '(magit-commit              :which-key "Commit")
        "gd" '(magit-diff                :which-key "Diff")
        "gf" '(magit-pull                :which-key "Pull")
        "gh" '(def/hydra-git-gutter/body :which-key "Hunk Mode")
        "gl" '(magit-log                 :which-key "Log")
        "gp" '(magit-push                :which-key "Push")
        "gs" '(magit-status              :which-key "Status")
        "gr" '(magit-rebase              :which-key "Rebase")

        "h"  '(evil-first-non-blank :which-key "Left")
        "j"  '(def/evil-move-7-lines-down :which-key "Down")
        "k"  '(def/evil-move-7-lines-up :which-key "Up")
        "l"  '(evil-end-of-line :which-key "Right")

        ";"  '(evil-ex :which-key "Evil ex")

        "'"  '(eval-expression :which-key "Eval")

        "z"  '(:ignore t :which-key "Hydra")
        "zc" '(def/hydra-spell-checker/body :which-key "Check Spell")
        "zf" '(hydra-text-scale/body :which-key "Font Size")
        "zs" '(def/hydra-web-search-s/body :which-key "Web Seach")
        "zg" '(def/hydra-git-gutter/body :which-key "Git gutter")
        "zw" '(jmercouris/hydra-window-custom/body :which-key "Window")

        "x"  '(:ignore t :which-key "eXecute")
        ;; "xx" '(counsel-M-x :which-key "Show All Executable")
        "xa" '(lsp-execute-code-action :which-key "Action(lsp)")
        "xc" '(compile :which-key "Compile")
        "xe" '(eval-buffer :which-key "Eval buffer")
        "xf" '(run-current-file :which-key "Current file")
        "xi" '(lsp-organize-imports :which-key "Import(lsp)")
        "xl" '(format-all-buffer :which-key "Lint")
        "x=" '(def/indent-all :which-key "Indent")

        "c"  '(:ignore t :which-key "Copy")
        "cf"  '(:ignore t                  :which-key "File")
        "cff" '(copy-file                  :which-key "File")
        "cfn" '(def/copy-current-file-name :which-key "Name")
        "cfs" '(def/copy-file-size         :which-key "Size")
        "cp"  '(:ignore t                   :which-key "Path")
        "cpa" '(def/copy-absolute-file-path :which-key "Absolute")
        "cpr" '(def/copy-relative-file-path :which-key "Relative")
        "cpl" '(def/copy-position           :which-key "with Linum")
        ;; "cc" '(evilnc-comment-or-uncomment-lines  :which-key "Commentout")

        "v"  '(:ignore t :which-key "Vterm")
        "vv" '(multi-vterm-dedicated-toggle  :which-key "Toggle")
        "vc" '(multi-vterm  :which-key "Create")
        "v[" '(multi-vterm-prev  :which-key "Previous")
        "v]" '(multi-vterm-next  :which-key "Next")

        "b"  '(:ignore t :which-key "Buffer")
        "bb" '(counsel-switch-buffer               :which-key "Swtich Buffer(all)")
        "bp" '(counsel-projectile-switch-to-buffer :which-key "Swtich Buffer(in project)")
        "bk" '(kill-buffer                         :which-key "Kill Buffer")
        "bo" '(kill-other-buffers                  :which-key "Kill All Other Buffers")
        "bp" '(counsel-projectile-switch-to-buffer :which-key "Swtich Buffer(in project)")
        "br" '(rename-uniquely                     :which-key "Rename Uniquely")
        "bR" '(rename-buffer                       :which-key "Rename Buffer")
        "bs" '(swiper-all                          :which-key "Search inside all buffers")

        "n"  '(:ignore t :which-key "???")

        "m"  '(:ignore t :which-key "Bookmarks")
        "mm" '(bm-toggle :which-key "Toggle")
        "ma" '(bm-show :which-key "Show All Current Buffer")
        "mA" '(bm-show-all :which-key "Show All All Buffer")
        "md" '(bm-remove-all-current-buffer :which-key "Delet Current Buffer's All Bookmarks")
        "mD" '(bm-remove-all-all-buffers :which-key "Delete All Buffer's All Bookmarks")
        "mn" '(bm-next :whitoch-key "Next")
        "mp" '(bm-previous :which-key "Previous")
        "m[" '(bm-previous :which-key "Previous")
        "m]" '(bm-next :which-key "Next")

        "," '(counsel-switch-buffer :which-key "Switch Buffer")
        "<" '(counsel-projectile-switch-project :which-key "Switch Project")

        "." '(dired-jump :which-key "Dired Jump")
        ">" '(dired :which-key "Dired")

        "/" '(counsel-rg :which-key "Search In Directory")

        "`" '(evil-switch-to-windows-last-buffer :which-key "Switch to last buffer")
        )

      (rune/visual-leader-keys
        "qs" '(def/web-search-google-v :which-key "Search Web")
        "qc" '(calc-grab-region :which-key "Calc")

        "rl" '(lsp-format-region :which-key "Lint")

        "xl" '(format-all-region :which-key "Lint")
        "xe" '(eval-region :which-key "Eval")

        "zs" '(def/hydra-web-search-v/body :which-key "Search")
        )

      ;; local-keybinding
      (general-def org-mode-map
        "<f8>" 'imenu-list-smart-toggle)

      (general-def dashboard-mode-map
        "<f9>" 'quit-dashboard)

      (general-def ivy-minibuffer-map
        "M-w" 'my-ivy-kill-current)
      )
  #+end_src

  #+begin_src emacs-lisp
    (use-package evil
      :init
      (setq evil-want-integration t)
      (setq evil-want-C-u-scroll t)
      (setq evil-want-Y-yank-to-eol t)
      (setq evil-intercept-esc t)
      (setq evil-ex-search-vim-style-regexp t)
      (setq evil-want-keybinding nil)
      :config
      (evil-set-initial-state 'shell-mode 'normal)
      (evil-mode)
      (progn
        ;; normal mode
        (define-key evil-normal-state-map "u" 'undo-tree-undo)
        (define-key evil-normal-state-map "\\" 'counsel-projectile-rg)

        (define-key evil-normal-state-map "s" 'nil)
        (define-key evil-normal-state-map "ss" 'avy-goto-char-2)
        (define-key evil-normal-state-map "sp" 'avy-goto-char-2-above)
        (define-key evil-normal-state-map "sn" 'avy-goto-char-2-below)
        (define-key evil-normal-state-map "sf" 'avy-goto-char-in-line)
        (define-key evil-normal-state-map "sj" 'avy-goto-line-below)
        (define-key evil-normal-state-map "sk" 'avy-goto-line-above)
        (define-key evil-normal-state-map "sa" 'avy-resume)
        (define-key evil-normal-state-map "s[" 'avy-prev)
        (define-key evil-normal-state-map "s]" 'avy-next)

        (define-key evil-normal-state-map (kbd "C-r") 'undo-tree-redo)
        (define-key evil-normal-state-map (kbd "C-p") 'previous-line)

        (define-key evil-normal-state-map (kbd "C-s") 'swiper)

        (define-key evil-normal-state-map (kbd "C-n") 'next-line)

        ;; visual mode
        (define-key evil-visual-state-map "s" 'nil)
        (define-key evil-visual-state-map "ss" 'avy-goto-char-2)
        (define-key evil-visual-state-map "sp" 'avy-goto-char-2-above)
        (define-key evil-visual-state-map "sn" 'avy-goto-char-2-below)
        (define-key evil-visual-state-map "sf" 'avy-goto-char-in-line)
        (define-key evil-visual-state-map "sj" 'avy-goto-line-below)
        (define-key evil-visual-state-map "sk" 'avy-goto-line-above)
        (define-key evil-visual-state-map "sa" 'avy-resume)
        (define-key evil-visual-state-map "s[" 'avy-prev)
        (define-key evil-visual-state-map "s]" 'avy-next)

        ;; insert mode
        (define-key evil-insert-state-map (kbd "C-e") 'move-end-of-line)
        (define-key evil-insert-state-map (kbd "C-u") (lambda () (interactive) (kill-line 0)))

        (define-key evil-insert-state-map (kbd "C-a") 'move-beginning-of-line)
        (define-key evil-insert-state-map (kbd "C-h") 'delete-backward-char)
        (define-key evil-insert-state-map (kbd "C-;") 'company-yasnippet)

        (define-key evil-insert-state-map (kbd "C-h") 'delete-backward-char)
        (define-key evil-insert-state-map (kbd "C-;") 'company-yasnippet)

        (define-key evil-insert-state-map (kbd "C-ㅈ") 'evil-delete-backward-word)
        (define-key evil-insert-state-map (kbd "C-ㅗ") 'delete-backward-char)

        (define-key evil-insert-state-map (kbd "M-n") 'company-select-next)
        (define-key evil-insert-state-map (kbd "M-p") 'company-select-previous)

        (evil-define-motion def/evil-move-7-lines-down ()
          (evil-next-line 7))

        (evil-define-motion def/evil-move-7-lines-up ()
          (evil-previous-line 7))

        (evil-define-motion def/evil-delete-all ()
          (evil-delete (point-min) (point-max)))

        (evil-define-motion def/evil-shift-left-all ()
          (evil-shift-left (point-min) (point-max)))

        (evil-define-motion def/evil-shift-left-all ()
          (evil-shift-left (point-min) (point-max)))
        )
      )


    (use-package evil-collection
      :after evil
      :config
      (evil-collection-define-key 'normal 'dired-mode-map
        "RET" 'dired-find-alternate-file
        "h" (lambda () (interactive) (find-alternate-file ".."))
        "l" 'dired-find-alternate-file)
      (evil-collection-init))

    (use-package evil-visualstar
      :after evil
      :config
      (global-evil-visualstar-mode))

    (use-package evil-numbers
      :after evil
      :config
      (define-key evil-normal-state-map (kbd "C-a") 'evil-numbers/inc-at-pt)
      (define-key evil-normal-state-map (kbd "C-S-a") 'evil-numbers/dec-at-pt))

    (use-package evil-surround
      :after evil
      :config
      (global-evil-surround-mode 1))

    (use-package evil-nerd-commenter
      :after evil
      :commands evilnc-comment-or-uncomment-lines)

    (use-package evil-goggles
      :after evil
      :init
      (custom-set-faces
       '(evil-goggles-yank-face ((t (:background "#9521d9"))))
       '(evil-goggles-record-macro-face ((t (:background "#db1226")))))
      (setq evil-goggles-enable-delete nil)
      (setq evil-goggles-enable-change nil)
      (setq evil-goggles-enable-paste nil)
      (setq evil-goggles-duration 0.200)
      :config
      (evil-goggles-mode))

    (use-package evil-lion
      :after evil
      :config
      (evil-lion-mode))

    (use-package evil-org
      :hook (org-mode . evil-org-mode)
      :config
      (require 'evil-org-agenda)
      (evil-org-agenda-set-keys))
  #+end_src

* Functions
** Toggle
*** lsp-treemacs
    #+begin_src emacs-lisp
      (defun db/lsp-treemacs-symbols-toggle ()
        "Toggle the lsp-treemacs-symbols buffer."
        (interactive)
        (if (get-buffer "*LSP Symbols List*")
            (kill-buffer "*LSP Symbols List*")
          (progn (lsp-treemacs-symbols)
                 (other-window -1))))
    #+end_src

*** transparency
    #+begin_src emacs-lisp

      (when (equal system-type 'gnu/linux)
        (set-frame-parameter (selected-frame) 'alpha '(100))
        (add-to-list 'default-frame-alist '(alpha . (100))))

      (defun toggle-transparency ()
        (interactive)
        (let ((alpha (frame-parameter nil 'alpha)))
          (set-frame-parameter
           nil 'alpha
           (if (eql (cond ((numberp alpha) alpha)
                          ((numberp (cdr alpha)) (cdr alpha))
                          ;; Also handle undocumented (<active> <inactive>) form.
                          ((numberp (cadr alpha)) (cadr alpha)))
                    100)
               '(85 . 50) '(100 . 100)))))
    #+end_src

** All
*** comment
    #+begin_src emacs-lisp
      (defun def/comment-all-line ()
        (interactive)
        (comment-region (point-min) (point-max)))
    #+end_src

*** copy
    #+begin_src emacs-lisp
      (defun def/copy-all-line ()
        (interactive)
        (clipboard-kill-ring-save (point-min) (point-max)))
    #+end_src

*** indent
    #+begin_src emacs-lisp
      (defun def/indent-all ()
        (interactive)
        (evil-indent (point-min) (point-max)))
    #+end_src

** Ivy
   #+begin_src emacs-lisp
     (defun my-ivy-kill-current ()
       "Save current Ivy candidate to the `kill-ring'."
       (interactive)
       (kill-new (ivy-state-current ivy-last)))
   #+end_src

** Hydra
*** Windows
    #+begin_src emacs-lisp
      (defhydra jmercouris/hydra-window-custom (:hint nil)
        "
      Movement      ^Split^            ^Switch^        ^Resize^
      ----------------------------------------------------------------
      _h_ ←           _v_split           _b_uffer        _H_ ←
      _j_ ↓           _s_plit            _f_ind files    _J_ ↓
      _k_ ↑           _1_only this       _P_rojectile    _K_ ↑
      _l_ →           _d_elete           s_w_ap          _L_ →
      _F_ollow        _e_qualize         _[_backward     _8_0 columns
      _q_uit          ^        ^         _]_forward
      "
        ("h" windmove-left)
        ("j" windmove-down)
        ("k" windmove-up)
        ("l" windmove-right)
        ("[" previous-buffer)
        ("]" next-buffer)
        ("H" jmercouris/hydra-move-splitter-left)
        ("J" jmercouris/hydra-move-splitter-down)
        ("K" jmercouris/hydra-move-splitter-up)
        ("L" jmercouris/hydra-move-splitter-right)
        ("b" counsel-switch-buffer)
        ("f" counsel-find-file)
        ("P" counsel-projectile-find-file)
        ("F" follow-mode)
        ("w" switch-to-buffer-other-window)
        ("8" jmercouris/set-80-columns)
        ("v" split-window-right)
        ("s" split-window-below)
        ("3" split-window-right)
        ("2" split-window-below)
        ("d" delete-window)
        ("1" delete-other-windows)
        ("e" balance-windows)
        ("q" nil))

      (defhydra def/hydra-window-resize (:hint nil)
        "
         Resize
      -----------------
          _h_ ←
          _j_ ↓
          _k_ ↑
          _l_ →
          _8_0 columns
          _q_uit
      "
        ("h" jmercouris/hydra-move-splitter-left)
        ("j" jmercouris/hydra-move-splitter-down)
        ("k" jmercouris/hydra-move-splitter-up)
        ("l" jmercouris/hydra-move-splitter-right)
        ("8" jmercouris/set-80-columns)
        ("q" nil))

      (defun jmercouris/hydra-move-splitter-left (arg)
        "Move window splitter left."
        (interactive "p")
        (if (let ((windmove-wrap-around))
              (windmove-find-other-window 'right))
            (shrink-window-horizontally arg)
          (enlarge-window-horizontally arg)))

      (defun jmercouris/hydra-move-splitter-right (arg)
        "Move window splitter right."
        (interactive "p")
        (if (let ((windmove-wrap-around))
              (windmove-find-other-window 'right))
            (enlarge-window-horizontally arg)
          (shrink-window-horizontally arg)))

      (defun jmercouris/hydra-move-splitter-up (arg)
        "Move window splitter up."
        (interactive "p")
        (if (let ((windmove-wrap-around))
              (windmove-find-other-window 'up))
            (enlarge-window arg)
          (shrink-window arg)))

      (defun jmercouris/hydra-move-splitter-down (arg)
        "Move window splitter down."
        (interactive "p")
        (if (let ((windmove-wrap-around))
              (windmove-find-other-window 'up))
            (shrink-window arg)
          (enlarge-window arg)))

      (defun jmercouris/set-80-columns ()
        "Set the selected window to 81 columns."
        (interactive)
        (set-window-width 81))
    #+end_src

*** Font
    #+begin_src emacs-lisp
      (defhydra hydra-text-scale (:time 2)
        "Turn on text scale mode"
        ("j" text-scale-increase "in")
        ("k" text-scale-decrease "out")
        ("q" nil "quit" :exit t))
    #+end_src

*** Git
    #+begin_src emacs-lisp
      (defun def/git-gutter:toggle-popup-hunk ()
        "Toggle git-gutter hunk window."
        (interactive)
        (if (and (get-buffer git-gutter:popup-buffer) (window-live-p (git-gutter:popup-buffer-window)))
            (delete-window (git-gutter:popup-buffer-window))
          (git-gutter:popup-hunk)
          ))

      (defhydra def/hydra-git-gutter (:hint nil)
        "Turn on git hunk mode"
        ("k" git-gutter:previous-hunk "up")
        ("j" git-gutter:next-hunk "down")
        ("s" git-gutter:stage-hunk "stage")
        ("r" git-gutter:revert-hunk "revert")
        ("t" def/git-gutter:toggle-popup-hunk "toggle-hunk")
        ("q" nil "quit" :exit t))
    #+end_src

*** Search
    #+begin_src emacs-lisp
      (defhydra def/hydra-web-search-v (:hint nil :exit t)
        "
           Engine
      -----------------
          _g_oogle
          _y_outube
          git_h_ub
          _q_uit
      "
        ("g" def/web-search-google-v)
        ("y" def/web-search-youtube-v)
        ("h" def/web-search-github-v)
        ("q" nil))

      (defhydra def/hydra-web-search-s (:hint nil :exit t)
        "
           Engine
      -----------------
          _g_oogle
          _y_outube
          git_h_ub
          _q_uit
      "
        ("g" def/web-search-google-s)
        ("y" def/web-search-youtube-s)
        ("h" def/web-search-github-s)
        ("q" nil))
    #+end_src

*** Spell
    #+begin_src emacs-lisp
      (defhydra def/hydra-spell-checker (:hint nil)
        "
           Command
      -----------------
          _t_oggle
          _k_ ↑
          _j_ ↓
          e_x_ecute
          _q_uit
      "
        ("t" def/toggle-spell-check)
        ("k" flyspell-goto-previous-error)
        ("j" flyspell-goto-next-error)
        ("x" flyspell-correct-at-point)
        ("q" nil))
    #+end_src

** Buffer
*** kill other buffers
    #+begin_src emacs-lisp
      (require 'cl)

      (defun kill-other-buffers ()
        "Kill all other buffers."
        (interactive)
        (mapc 'kill-buffer
              (delq (current-buffer)
                    (remove-if-not 'buffer-file-name (buffer-list)))))
    #+end_src

*** save all buffers
    #+begin_src emacs-lisp
      (defun def/save-all-buffers () (interactive) (save-some-buffers t))
    #+end_src

** Run
   #+begin_src emacs-lisp
     (defvar run-current-file-before-hook nil "Hook for `run-current-file'. Before the file is run.")

     (defvar run-current-file-after-hook nil "Hook for `run-current-file'. After the file is run.")

     (defun run-current-go-file ()
       "Run or build current golang file.

     To build, call `universal-argument' first.

     Version 2018-10-12"
       (interactive)
       (when (not (buffer-file-name)) (save-buffer))
       (when (buffer-modified-p) (save-buffer))
       (let* (
              ($outputb "*run output*")
              (resize-mini-windows nil)
              ($fname (buffer-file-name))
              ($fSuffix (file-name-extension $fname))
              ($progName "go")
              $cmdStr)
         (setq $cmdStr (concat $progName " \""   $fname "\" &"))
         (if current-prefix-arg
             (progn
               (setq $cmdStr (format "%s build \"%s\" " $progName $fname)))
           (progn
             (setq $cmdStr (format "%s run \"%s\" &" $progName $fname))))
         (progn
           (message "running %s" $fname)
           (message "%s" $cmdStr)
           (shell-command $cmdStr $outputb )
           ;;
           )))
     (defvar run-current-file-map nil "A association list that maps file extension to program path, used by `run-current-file'. First element is file suffix, second is program name or path. You can add items to it.")
     (setq
      run-current-file-map
      '(
        ("php" . "php")
        ("pl" . "perl")
        ("py" . "python3")
        ("py2" . "python2")
        ("py3" . "python3")
        ("rb" . "ruby")
        ("go" . "go run")
        ("hs" . "runhaskell")
        ("js" . "deno run")
        ("ts" . "deno run") ; TypeScript
        ("tsx" . "tsc")
        ("mjs" . "node --experimental-modules ")
        ("sh" . "bash")
        ("clj" . "java -cp ~/apps/clojure-1.6.0/clojure-1.6.0.jar clojure.main")
        ("rkt" . "racket")
        ("ml" . "ocaml")
        ("vbs" . "cscript")
        ("tex" . "pdflatex")
        ("latex" . "pdflatex")
        ("java" . "javac")
        ))

     (defun run-current-file ()
       "Execute the current file.
     For example, if the current buffer is x.py, then it'll call 「python x.py」 in a shell.
     Output is printed to buffer “*run output*”.
     File suffix is used to determine which program to run, set in the variable `run-current-file-map'.

     If the file is modified or not saved, save it automatically before run.

     URL `http://ergoemacs.org/emacs/elisp_run_current_file.html'
     Version 2020-09-24 2021-01-21"
       (interactive)
       (let (
             ($outBuffer "*run output*")
             (resize-mini-windows nil)
             ($suffixMap run-current-file-map )
             $fname
             $fSuffix
             $progName
             $cmdStr)
         (when (not (buffer-file-name)) (save-buffer))
         (when (buffer-modified-p) (save-buffer))
         (setq $fname (buffer-file-name))
         (setq $fSuffix (file-name-extension $fname))
         (setq $progName (cdr (assoc $fSuffix $suffixMap)))
         (setq $cmdStr (concat $progName " \""   $fname "\" &"))
         (run-hooks 'run-current-file-before-hook)
         (cond
          ((string-equal $fSuffix "el")
           (load $fname))
          ((string-equal $fSuffix "go")
           (run-current-go-file))
          ((string-equal $fSuffix "java")
           (progn
             (shell-command (format "javac %s" $fname) $outBuffer )
             (shell-command (format "java %s" (file-name-sans-extension
                                               (file-name-nondirectory $fname))) $outBuffer )))
          (t (if $progName
                 (progn
                   (message "Running")
                   (shell-command $cmdStr $outBuffer ))
               (error "No recognized program file suffix for this file."))))
         (run-hooks 'run-current-file-after-hook)))
   #+end_src

** Web
   #+begin_src emacs-lisp
     (defun def/web-search-google-v (start end)
       (interactive "r")
       (let ((q (buffer-substring-no-properties start end)))
         (browse-url (concat "https://google.com/search?q="
                             (url-hexify-string q)))))

     (defun def/web-search-google-s ()
       (interactive)
       (let ((q (read-string "Google Seach : ")))
         (browse-url (concat "https://google.com/search?q="
                             (url-hexify-string q)))))

     (defun def/web-search-youtube-v (start end)
       (interactive "r")
       (let ((q (buffer-substring-no-properties start end)))
         (browse-url (concat "https://www.youtube.com/results?search_query="
                             (url-hexify-string q)))))

     (defun def/web-search-youtube-s ()
       (interactive)
       (let ((q (read-string "Youtube Seach : ")))
         (browse-url (concat "https://www.youtube.com/results?search_query="
                             (url-hexify-string q)))))

     (defun def/web-search-github-v (start end)
       (interactive "r")
       (let ((q (buffer-substring-no-properties start end)))
         (browse-url (concat "https://github.com/search?q="
                             (url-hexify-string q)))))

     (defun def/web-search-github-s ()
       (interactive)
       (let ((q (read-string "Github Seach : ")))
         (browse-url (concat "https://github.com/search?q="
                             (url-hexify-string q)))))



     (defhydra hydra-browse (:hint nil :exit t)
       "
      ^Shop^           ^SNS^            ^Doc^          ^Dev^                 ^Pictures^      ^Others^
      ^^^^^^-----------------------------------------------------------------------------------------
      _a_: Amazon      _t_: Twitter     _m_: MDN       _g_: Github           _u_: Unsplash   _w_: Weather
      _r_: Ridibooks   _y_: Youtube     _h_: HTML      _q_: Qita             _p_: Pixabay    _n_: News
                                                       _s_: Stackoverflow    _i_: Im free    _Y_: Yahoo

      _q_: Quit
     "
       ("a" (browse-url "https://www.amazon.co.jp/"))
       ("r" (browse-url "https://ridibooks.com/category/new-releases/2220?order=recent"))

       ("t" (browse-url "https://twitter.com"))
       ("y" (browse-url "https://www.youtube.com/"))

       ("m" (browse-url "https://developer.mozilla.org/en-US/"))
       ("h" (browse-url "https://html.spec.whatwg.org/"))

       ("g" (browse-url "https://github.com/"))
       ("q" (browse-url "https://qiita.com"))
       ("s" (browse-url "https://stackoverflow.com/"))

       ("u" (browse-url "https://unsplash.com/"))
       ("p" (browse-url "https://pixabay.com/"))
       ("i" (browse-url "http://imcreator.com/free"))

       ("w" (browse-url "https://tenki.jp/"))
       ("Y" (browse-url "https://news.yahoo.co.jp/"))
       ("n" (browse-url "https://news.naver.com/"))

       ("q" nil))
   #+end_src

** Dashboard
   #+begin_src emacs-lisp
     (defun open-dashboard ()
       "Open the *dashboard* buffer and jump to the first widget."
       (interactive)
       (delete-other-windows)
       ;; Refresh dashboard buffer
       (if (get-buffer dashboard-buffer-name)
           (kill-buffer dashboard-buffer-name))
       (dashboard-insert-startupify-lists)
       (switch-to-buffer dashboard-buffer-name)
       ;; Jump to the first section
       (goto-char (point-min))
       (dashboard-goto-recent-files))

     (defun quit-dashboard ()
       "Quit dashboard window."
       (interactive)
       (quit-window t)
       (when (and dashboard-recover-layout-p
                  (bound-and-true-p winner-mode))
         (winner-undo)
         (setq dashboard-recover-layout-p nil)))

     (defun dashboard-goto-recent-files ()
       "Go to recent files."
       (interactive)
       (funcall (local-key-binding "r")))
   #+end_src

** Spell
   #+begin_src emacs-lisp
     ;; I copied this code from http://pragmaticemacs.com/emacs/jump-back-to-previous-typo/
     (defun flyspell-goto-previous-error (arg)
       "Go to arg previous spelling error."
       (interactive "p")
       (while (not (= 0 arg))
         (let ((pos (point))
               (min (point-min)))
           (if (and (eq (current-buffer) flyspell-old-buffer-error)
                    (eq pos flyspell-old-pos-error))
               (progn
                 (if (= flyspell-old-pos-error min)
                     ;; goto beginning of buffer
                     (progn
                       (message "Restarting from end of buffer")
                       (goto-char (point-max)))
                   (backward-word 1))
                 (setq pos (point))))
           ;; seek the next error
           (while (and (> pos min)
                       (let ((ovs (overlays-at pos))
                             (r '()))
                         (while (and (not r) (consp ovs))
                           (if (flyspell-overlay-p (car ovs))
                               (setq r t)
                             (setq ovs (cdr ovs))))
                         (not r)))
             (backward-word 1)
             (setq pos (point)))
           ;; save the current location for next invocation
           (setq arg (1- arg))
           (setq flyspell-old-pos-error pos)
           (setq flyspell-old-buffer-error (current-buffer))
           (goto-char pos)
           (if (= pos min)
               (progn
                 (message "No more miss-spelled word!")
                 (setq arg 0))
             (forward-word)))))

     (defun def/spell-check ()
       (interactive)
       (flyspell-mode 1)
       (flyspell-buffer))

     (defun def/toggle-spell-check ()
       (interactive)
       (let ((toggle
              (if flyspell-mode
                  t nil)))
         (if toggle
             (flyspell-mode 0)
           (def/spell-check))))
   #+end_src

** Date
   #+begin_src emacs-lisp
     (defun insert-now ()
       "Insert string for the current time formatted like '2:34 PM'."
       (interactive)                 ; permit invocation in minibuffer
       (insert (format-time-string "%Y-%m-%dT%T%z")))

     (defun insert-today ()
       "Insert string for today's date nicely formatted in American style,
                              e.g. Sunday, September 17, 2000."
       (interactive)                 ; permit invocation in minibuffer
       (insert (format-time-string "%Y-%m-%d %A")))

     (defun insert-tomorrow ()
       (interactive)
       (let* ((tomorrow (decode-time)))
       (cl-incf (nth 3 tomorrow))
         (insert (format-time-string "%Y-%m-%d %A" (apply #'encode-time tomorrow)))))

     (defun insert-yesterday ()
       (interactive)
       (let* ((yesterday (decode-time)))
       (cl-incf (nth 3 yesterday) -1)
         (insert (format-time-string "%Y-%m-%d %A" (apply #'encode-time yesterday)))))

     (defun insert-aweek-later ()
       (interactive)
       (let* ((aweek (decode-time)))
       (cl-incf (nth 3 aweek) 7)
         (insert (format-time-string "%Y-%m-%d %A" (apply #'encode-time aweek)))))
   #+end_src

** File
*** Copy
    #+begin_src emacs-lisp
      (defun def/copy-relative-file-path (filename &optional args)
        "Copy name of file FILENAME into buffer after point.

        Prefixed with \\[universal-argument], expand the file name to
        its fully canocalized path.  See `expand-file-name'.

        Prefixed with \\[negative-argument], use relative path to file
        name from current directory, `default-directory'.  See
        `file-relative-name'.

        The default with no prefix is to copy the file name exactly as
        it appears in the minibuffer prompt."
        ;; Based on copy-file in Emacs -- ashawley 20080926
        (interactive "*fCopy relative file name: \nP")
        (cond ((eq '- args)
               (kill-new (expand-file-name filename)))
              ((not (null args))
               (kill-new filename))
              (t
               (kill-new (file-relative-name filename)))))

      (defun def/copy-absolute-file-path (filename &optional args)
        "Copy name of file FILENAME into buffer after point.

        Prefixed with \\[universal-argument], expand the file name to
        its fully canocalized path.  See `expand-file-name'.

        Prefixed with \\[negative-argument], use relative path to file
        name from current directory, `default-directory'.  See
        `file-relative-name'.

        The default with no prefix is to copy the file name exactly as
        it appears in the minibuffer prompt."
        ;; Based on copy-file in Emacs -- ashawley 20080926
        (interactive "*fCopy absolute file name: \nP")
        (cond ((eq '- args)
               (kill-new (expand-file-name filename)))
              ((not (null args))
               (kill-new filename))
              (t
               (kill-new filename))))

      (defun def/copy-current-file-name ()
        (interactive)
        (kill-new (file-relative-name (buffer-file-name))))

      ;; (defun def/copy-current-file-line-length ()
      ;;   (interactive)
      ;;   (kill-new (evil-ex-line-number)))

      (defun def/copy-file-size ()
        (interactive)
        (kill-new (format "%s" (buffer-size))))

      (defun def/copy-position ()
        ;; https://stackoverflow.com/questions/10681766/emacs-org-mode-textual-reference-to-a-fileline
        "Copy to the kill ring a string in the format \"file-name:line-number\"
      for the current buffer's file name, and the line number at point."
        (interactive)
        (kill-new
         (format "%s:%d" (buffer-file-name) (save-restriction
                                              (widen) (line-number-at-pos)))))
    #+end_src

*** Insert
    #+begin_src emacs-lisp
      ;; https://www.emacswiki.org/emacs/InsertFileName
      (defun def/insert-relative-file-path (filename &optional args)
        "Insert name of file FILENAME into buffer after point.

        Prefixed with \\[universal-argument], expand the file name to
        its fully canocalized path.  See `expand-file-name'.

        Prefixed with \\[negative-argument], use relative path to file
        name from current directory, `default-directory'.  See
        `file-relative-name'.

        The default with no prefix is to insert the file name exactly as
        it appears in the minibuffer prompt."
        ;; Based on insert-file in Emacs -- ashawley 20080926
        (interactive "*fInsert relative file name: \nP")
        (cond ((eq '- args)
               (insert (expand-file-name filename)))
              ((not (null args))
               (insert filename))
              (t
               (insert (file-relative-name filename)))))

      (defun def/insert-absolute-file-path (filename &optional args)
        "Insert name of file FILENAME into buffer after point.

        Prefixed with \\[universal-argument], expand the file name to
        its fully canocalized path.  See `expand-file-name'.

        Prefixed with \\[negative-argument], use relative path to file
        name from current directory, `default-directory'.  See
        `file-relative-name'.

        The default with no prefix is to insert the file name exactly as
        it appears in the minibuffer prompt."
        ;; Based on insert-file in Emacs -- ashawley 20080926
        (interactive "*fInsert absolute file name: \nP")
        (cond ((eq '- args)
               (insert (expand-file-name filename)))
              ((not (null args))
               (insert filename))
              (t
               (insert filename))))

      (defun def/insert-file-name ()
        (interactive)
        (insert (file-relative-name (buffer-file-name))))


      (defun def/insert-file-size ()
        (interactive)
        (insert (format "%s" (buffer-size))))
    #+end_src

*** Move
    #+begin_src emacs-lisp
      ;; https://zck.org/emacs-move-file
      (defun def/move-file (new-location)
        "Write this file to NEW-LOCATION, and delete the old one."
        (interactive (list (expand-file-name
                            (if buffer-file-name
                                (read-file-name "Move file to: ")
                              (read-file-name "Move file to: "
                                              default-directory
                                              (expand-file-name (file-name-nondirectory (buffer-name))
                                                                default-directory))))))
        (when (file-exists-p new-location)
          (delete-file new-location))
        (let ((old-location (expand-file-name (buffer-file-name))))
          (message "old file is %s and new file is %s"
                   old-location
                   new-location)
          (write-file new-location t)
          (when (and old-location
                     (file-exists-p new-location)
                     (not (string-equal old-location new-location)))
            (delete-file old-location))))
    #+end_src

** Link
   #+begin_src emacs-lisp
     (defun get-link (x)
       "Assuming x is a LINK node in an Org mode parse tree,
        return a list consisting of its type (e.g. \"http\")
        and its path."
       (interactive)
       (let* ((link (cadr x))
              (type (plist-get link :type))
              (path (plist-get link :path)))
         (if (or (string= type "http") (string= type "https"))
             (list type path))))
   #+end_src

** Persp
   #+begin_src emacs-lisp
     (defun persp-set-keybind ()
       (mapc (lambda (i)
               (persp-switch (int-to-string i))
               (kill-buffer (format "*scratch* (%d)" i))
               (global-set-key (kbd (format persp-switch-prefix i))
                               `(lambda ()
                                  (interactive)
                                  (persp-switch ,(int-to-string i)))))
             (number-sequence (string-to-number persp-top-perspective)
                              (string-to-number persp-bottom-perspective))))

     (defun persp-my-setup ()
       (persp-set-keybind)
       (persp-switch persp-first-perspective)
       (persp-kill "main") )
   #+end_src

** Yas
   #+begin_src emacs-lisp
     (defun def/yas-new-vertical-snippet ()
       (interactive)
       (evil-window-vsplit)
       (yas-new-snippet))
   #+end_src

** Finder(Mac OS)
   #+begin_src emacs-lisp
     (defun finder-current-dir-open()
       (interactive)
       (shell-command "open ."))
   #+end_src
